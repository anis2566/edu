datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String          @default("User")

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  
  purchases     Purchase[]
  questions     Question[]
  questionAnswers QuestionAnswer[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String
  tags        String[] @default([])

  courses     Course[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  tags        String[] @default([])
  rating      Float?
  length      Int      @default(0)

  categoryId  String?  @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  purchases   Purchase[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Chapter {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  videoUrl      String?
  videoThumbnail String?
  videoLength   Int?
  position      Int?
  isPublished   Boolean        @default(false)
  isFree        Boolean        @default(false)

  courseId      String         @db.ObjectId
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  attachments   Attachment[]
  userProgress  UserProgress[]
  questions     Question[]
  assignment   Assignment?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String

  chapterId String   @db.ObjectId
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  answers   QuestionAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}


model QuestionAnswer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  answer    String   

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
}


model Attachment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  url         String

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
}

model Assignment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  dueDate     DateTime?
  fileUrl     String
  
  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([chapterId])
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId

  userId      String   @db.ObjectId

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
}


model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}